group 'com.cont.hwm'
version '1.0'

buildscript {
    repositories {
        google()
        jcenter()
        maven { url 'https://maven.aliyun.com/repository/public/' }
        maven { url 'http://developer.huawei.com/repo/' }
        maven { url 'https://maven.aliyun.com/repository/jcenter' }
        maven { url 'https://maven.aliyun.com/repository/google' }
        maven { url 'https://maven.aliyun.com/repository/central' }
        maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
        maven { url 'http://maven.aliyun.com/nexus/content/repositories/jcenter/' }
        maven { url 'https://dl.bintray.com/umsdk/release'}
        maven { url 'https:/maven.google.com' }

    }

    dependencies {
        classpath 'com.android.tools.build:gradle:4.1.0'
        classpath 'com.novoda:bintray-release:0.3.4'
    }
}

rootProject.allprojects {
    repositories {
        google()
        jcenter()
        flatDir {
            dirs 'libs'
            dirs project(':hwm').file('libs')
        }
        maven { url 'https://maven.aliyun.com/repository/public/' }
        maven { url 'http://developer.huawei.com/repo/' }
        maven { url 'https://maven.aliyun.com/repository/jcenter' }
        maven { url 'https://maven.aliyun.com/repository/google' }
        maven { url 'https://maven.aliyun.com/repository/central' }
        maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
        maven { url 'http://maven.aliyun.com/nexus/content/repositories/jcenter/' }

        maven { url "https://jitpack.io" }
        maven { url 'https://dl.bintray.com/umsdk/release'}
        maven { url 'https:/maven.google.com'}
    }
}


def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the " +
            "local.properties file.")
}
apply plugin: 'com.android.library'
android {
    compileSdkVersion 30

    defaultConfig {
        minSdkVersion 21
        multiDexEnabled true

        //是否包含数据会议so包
        buildConfigField "String", "needScreenShare", "\"" + (needScreenShare == null ? "true" : needScreenShare) + "\""
        //是否包含会中IM功能
        buildConfigField "String", "needConfChat", "\"" + (needConfChat == null ? "true" : needConfChat) + "\""


    }
    compileOptions {
        encoding "UTF-8"
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    if (needScreenShare != null && !needScreenShare.toBoolean()) {
        packagingOptions {
            excludes += ['**/libTupConf.so']
        }
    }
    lintOptions {
        abortOnError false
    }
    buildTypes {
        debug {
            minifyEnabled false //是否开启混淆，其实子模块中这个已经没有作用了，由主模块控制
            consumerProguardFiles 'proguard-rules.pro'  //子模块要用这个命令才能生效
        }
        release {
            minifyEnabled true //是否开启混淆，其实子模块中这个已经没有作用了，由主模块控制
            consumerProguardFiles 'proguard-rules.pro'  //子模块要用这个命令才能生效
        }
    }
    sourceSets {
        //表示我们不编译jni代码，直接从libs里面复制so库
        main {
            jniLibs.srcDir 'libs'
        }

    }
    dependencies{
        compileOnly files("$flutterRoot/bin/cache/artifacts/engine/android-arm/flutter.jar")


        implementation fileTree(include: ['*.jar'], dir: 'libs')

        implementation 'androidx.appcompat:appcompat:1.2.0'
        implementation 'com.google.android.material:material:1.3.0'
        implementation 'androidx.recyclerview:recyclerview:1.0.0'
        implementation 'androidx.cardview:cardview:1.0.0'
//        implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
        implementation 'com.wang.avi:library:2.1.3'
        api 'androidx.legacy:legacy-support-v4:1.0.0'

        //sdk 用到的一些三方框架

        api 'androidx.palette:palette:1.0.0'
        api 'androidx.appcompat:appcompat:1.3.0'
        api 'androidx.recyclerview:recyclerview:1.2.1'
        api 'com.google.android.material:material:1.3.0'
        api 'org.aspectj:aspectjrt:1.9.6'
        api 'io.reactivex.rxjava2:rxandroid:2.1.1'
        api 'androidx.constraintlayout:constraintlayout:2.0.4'
        api 'com.github.bumptech.glide:glide:4.11.0'
        api 'androidx.legacy:legacy-support-v13:1.0.0'
        implementation 'io.reactivex.rxjava2:rxjava:2.2.18'
        implementation 'com.google.code.gson:gson:2.8.6'
        implementation 'org.greenrobot:eventbus:3.2.0'
        implementation 'com.squareup.okhttp3:okhttp:4.9.1'
        implementation 'com.github.promeg:tinypinyin:3.0.0'
        implementation 'com.huawei.hms:scan:1.1.3.301'
        implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'


        //sdk 编译的aar
        implementation(name: 'HWMFoundation-release', ext: 'aar')
        implementation(name: 'HWMMobileCommonUI-release', ext: 'aar')
        implementation(name: 'HWMMobileConfUI-release', ext: 'aar')
        implementation(name: 'HWMPermission-release', ext: 'aar')
        implementation(name: 'HWMNativeSdk-release', ext: 'aar')
        implementation(name: 'HWMUiSdk-release', ext: 'aar')
        implementation(name: 'HWMCLink-release', ext: 'aar')
        implementation(name: 'hwmmediapicker-release', ext: 'aar')
        if (needConfChat == null || needConfChat.toBoolean()) {
            implementation(name: 'imsdk-release', ext: 'aar')
        }

    }
}
